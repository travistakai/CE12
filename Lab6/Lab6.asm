;Travis Takai
;1375886
;CE12L-03
;X to exit, N to encrypt, E to decrypt




.ORIG x3000

;---------------------INITIALIZATION---------------------

BEGIN AND R0, R0, #0
AND R1, R1, #0
AND R2, R2, #0
AND R3, R3, #0
AND R4, R4, #0
AND R5, R5, #0
AND R6, R6, #0
AND R7, R7, #0
ST R7, NUMBER
ST R7, CASE
ST R7 CIPHER


;INPUT STAGE
LEA R0, WELCOME
PUTS

;---------------------INPUT AND CHECK FOR SPECIAL CHARS---------------

INPUT GETC
OUT

ADD R1, R0, #0 ;PUT R0 IN R1 TO CHECK IF COMMAND CHAR
LD R5 STORED

;IF INPUT IS EQUAL TO 'X' THEN QUIT
ADD R1, R1, R5
ADD R1, R1, #-16
ADD R1, R1, #-3
BRz DONE

;CHECK IF ITS 'N'
ADD R1, R0, #0
ADD R1, R1, R5
ADD R1, R1, #-9
BRz ENFLAG

;CHECK IF ITS 'E'
ADD R1, R0, #0
ADD R1, R1, R5
BRz DEFLAG

BRnp INPUT

ENFLAG AND R0, R0, #0
ST R0, FLAG
BRnzp CYPHERIN

DEFLAG AND R0, R0, #0
ADD R0, R0, #1
ST R0, FLAG
BRnzp CYPHERIN



;---------------------ENTERING A CIPHER---------------------
CYPHERIN LEA R0, ENTRY
PUTS

REPEAT GETC
OUT

;CONVERSION FROM ASCII TO VALUE
ADD R2, R0, #0
ADD R2, R2, #-16
ADD R2, R2, #-16
ADD R2, R2, #-16
ST R2, NUMBER


;CHECK FOR X
ADD R2, R0, #0
ADD R2, R2, #-16
ADD R2, R2, #-16
ADD R2, R2, #-16
ADD R2, R2, #-16
ADD R2, R2, #-16
ADD R2, R2, #-8
BRz DONE


;CHECK FOR LF
ADD R2, R0, #0
ADD R2, R2, #-10
BRz USERIN

BRnp RESTORE

;---------------------MULTIPLY BY 10 FOR EACH NUMBER INPUT---------------------


;REPEATEDLY ADD PREVIOUS SUM TO CALCULATE CIPHER
RESTORE LD R0, CIPHER
ADD R2, R0, #0
AND R1, R1, #0
ADD R1, R1, #9

MULTADD ADD R0, R0, R2
ADD R1, R1, #-1

BRp MULTADD


;ADD PREVIOUS SUM TO NEW NUMBER
LD R4, NUMBER
ADD R4, R4, R0
ST R4, CIPHER
BRnzp REPEAT



;---------------------ASK FOR STRING INPUT---------------------
USERIN LEA R0, INTAKE
PUTS

LD R3, ADDRESS

LD R2, ADDRESS


CONTINUE GETC
OUT

AND R5, R5, #0
LD R4, CIPHER	
LD R1, POSITION
LD R7, ADDRESS
ADD R1, R1, R7

ADD R0, R0, #-10	;CHECK FOR LF
BRz FINALE

ADD R0, R0, #10


ADD R0, R0, #-16
ADD R0, R0, #-16
ADD R0, R0, #-16
ADD R0, R0, #-16
BRnz PUNCTUATE


ADD R0, R0, #-16
ADD R0, R0, #-16
BRp LOWERCASE
BRnz UPPERCASE


;PUNCTUATION
PUNCTUATE ADD R0, R0, #15
ADD R0, R0, #15
ADD R0, R0, #15
ADD R0, R0, #15
ADD R0, R0, #4
JSR STORE
BRnzp JSTORE


;LOWERCASE
LOWERCASE ST R5, CASE
LD R5, FLAG
BRz ENCRYPTION
BRp DECRYPTION


;UPPERCASE
UPPERCASE ADD R5, R5, #1
ST R5, CASE
ADD R0, R0, #15
ADD R0, R0, #15
ADD R0, R0, #2
LD R5, FLAG
BRz ENCRYPTION
BRp DECRYPTION



ENCRYPTION JSR ENCRYPT
BRnzp JSTORE

DECRYPTION JSR DECRYPT
BRnzp JSTORE



JSTORE LD R1, POSITION
JSR STORE
ADD R6, R6, #1
ADD R3, R3, #-1
BRz FINALE
BRp CONTINUE


;---------------------PRINTING STAGE---------------------

FINALE LD R1, POSITION	;NEEDS TO ADD OFFSET
			;NEEDS TO IGNORE PUNCTUATION

LD R2, ADDRESS
LD R3, FLAG		;FLAG=0 (ENCRYPTION) MEANS NORMAL IS STORED 0-199. FLAG=1 (DECRYPTION) MEANS NORMAL STORED 200-399
BRz TOP
BRp BOTTOM

TOP LEA R0, DECRYPTED
PUTS
JSR PRINT

LD R1, POSITION
ADD R1, R1, R2
LEA R0, ENCRYPTED
PUTS
JSR PRINT
BRnzp BEGIN


BOTTOM LEA R0, DECRYPTED
PUTS
ADD R1, R1, R2
JSR PRINT
LD R1, POSITION
LEA R0, ENCRYPTED
PUTS
JSR PRINT
BRnzp BEGIN


;---------------------END STAGE---------------------



DONE HALT



;-----------------SUBROUTINES-----------------------


;NEEDS TO BE PASSED IN VALUE 1-26 FOR LETTER VALUE
ENCRYPT
	;R0 IS CHAR
	;R4 IS CIPHER


	ADD R0, R0, R4
	ADD R0, R0, #-16
	ADD R0, R0, #-10
	BRnz REVERT
	BRp KEEP


	KEEP AND R5, R5, #0
	ST R5, OVERFLOW
	LD R5, CASE
	BRz LOWER
	BRp UPPER


	REVERT ADD R0, R0, #15
	ADD R0, R0, #11
	AND R5, R5, #0
	ADD R5, R5, #1
	ST R5, OVERFLOW
	LD R5, CASE
	BRz LOWER
	BRp UPPER



	UPPER ADD R0, R0, #15		;HANDLES A-N
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #4
	BRnzp FINAL

	LOWER ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #6
	BRnzp FINAL

	FINAL ADD R5, R7, #0
	JSR STORE
	LD R1, OVERFLOW
	BRz NORMAL
	BRp SUBTRACT
	
	SUBTRACT NOT R4, R4
	ADD R4, R4, #1
	ADD R0, R4, R0		;RESTORE ORIGINAL VALUE FOR RETURN
	ADD R7, R5, #0
	RET


	NORMAL LD R1, ALPHA
	NOT R4, R4
	ADD R4, R4, #1
	ADD R4, R4, R1
	ADD R0, R4, R0		;RESTORE ORIGINAL VALUE FOR RETURN
	ADD R7, R5, #0
	RET



DECRYPT
	;R0 IS CHAR
	;R4 IS CIPHER

	NOT R4, R4
	ADD R4, R4, #1
	ADD R0, R0, R4
	BRnz CHANGE	;ADD IN 26
	BRp SAME	;NUMBER IS OK


	SAME AND R5, R5, #0
	ST R5, OVERFLOW
	LD R5, CASE
	BRz LOWERC
	BRp UPPERC


	CHANGE AND R5, R5, #0
	ADD R5, R5, #1
	ST R5, OVERFLOW
	ADD R0, R0, #15
	ADD R0, R0, #11
	LD R5, CASE
	BRz LOWERC
	BRp UPPERC



	UPPERC ADD R0, R0, #15		;HANDLES A-N
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #4
	BRnzp FINALC

	LOWERC ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #15
	ADD R0, R0, #6
	BRnzp FINALC

	FINALC ADD R5, R7, #0
	JSR STORE
	LD R1, OVERFLOW
	BRz PLUS
	BRp MINUS

	PLUS NOT R4, R4
	ADD R4, R4, #1
	ADD R0, R4, R0		;RESTORE ORIGINAL VALUE FOR RETURN
	ADD R7, R5, #0
	RET

	MINUS LD R1, NEGALPHA
	LD R4, CIPHER
	ADD R4, R4, R1
	ADD R0, R0, R4
	ADD R7, R5, #0
	RET



STORE
	;R1 IS COORDINATE
	;R6 IS OFFSET
	;R0 IS CHAR

	ADD R1, R1, R6
	STR R0, R1, 0
	RET

LOAD 
	;R1 IS BASE COORD
	;R2 IS OFFSET
	;R0 IS CHAR
	ADD R1, R1, R2
	LDR R0, R1, 0
	RET

PRINT
	;READING FROM STRINGIN
	;TAKES IN ADDRESS AND PRINTS OUT 200 OR UNTIL REACHES END OF STRINGS
	;START OF ADDRESS WILL BE STORED IN R1

	LD R6, ADDRESS
	ST R7, NUMBER
	PRINTING LDR R0, R1, #0
	OUT
	ADD R6, R6, #-1
	BRz OVER
	ADD R1, R1, #1
	BRnp PRINTING
	OVER LD R7, NUMBER
	RET



;-------------------------------------------------------------------STORAGE ELEMENTS--------------------------------------------------------------------------------------
CIPHER .BLKW x1
ADDRESS .FILL #200 ;OFFSET FROM START OF STRINGIN

NUMBER .BLKW x1

CASE .BLKW x1	;1 FOR UPPERCASE AND 0 FOR LOWERCASE
STORED .FILL #-69

OVERFLOW .BLKW x1
NEGALPHA .FILL #-26
ALPHA .FILL #26

POSITION .FILL x3153
FLAG .BLKW x1	;0 FOR ENCRYPTION AND 1 FOR DECRYPTION. ALSO CAN BE USED DURING PRINT TO DIFFERENTIATE WHICH STRING IS STORED IN FIRST/SECOND POSITION

WELCOME .STRINGZ "\nEnter command\n"
ENTRY .STRINGZ "\nEnter cipher\n"
INTAKE .STRINGZ "\nInput string\n"
DECRYPTED .STRINGZ "\nDecrypted: "
ENCRYPTED .STRINGZ "\nEncrypted: "


STRINGIN .BLKW x400



.END