;TRAVIS TAKAI
;CE12L-03
;1375886

.ORIG x3000


;RESET ALL NUMBERS TO 0
START AND R0, R0, #0
AND R1, R1, #0
AND R2, R2, #0
AND R3, R3, #0
AND R4, R4, #0
AND R5, R5, #0
AND R6, R6, #0
AND R7, R7, #0
ST R7, FLAG
ST R7, NUMBER
ST R7, STORAGE


LEA R0, WELCOME ;LOAD AND PRINT WELCOME MESSAGE
PUTS

LOOP GETC ;TAKE INPUT FROM USER
OUT
ADD R3, R0, #0





ADD R1, R1, #9	;counter starting at 9

;CONVERT FROM ASCII TO NUMBER
ADD R0, R0, #-16
ADD R0, R0, #-16
ADD R0, R0, #-16



;CHECK IF NUMBER IS EQUAL TO 'X'
CHECK ADD R3, R3, #-16
ADD R3, R3, #-16
ADD R3, R3, #-16
ADD R3, R3, #-16
ADD R3, R3, #-16
ADD R3, R3, #-8
BRz DONE

ADD R3, R3, #15
ADD R3, R3, #15
ADD R3, R3, #15
ADD R3, R3, #15
ADD R3, R3, #15
ADD R3, R3, #13


;CHECK IF NUMBER IS EQUAL TO '-'
ADD R3, R3, #-16
ADD R3, R3, #-16
ADD R3, R3, #-13
BRz FLAG


;CHECK IF NUMBER IS EQUAL TO 'LF'
RESUME ST R0, NUMBER	;STORE NUMBER TO DO ADD LATER
ADD R3, R3, #15
ADD R3, R3, #15
ADD R3, R3, #15

ADD R3, R3, -10
BRz PRINTSTATEMENT

BRnp RESTORE

BRnp LOOP


;PRINT OUT BINARY IS STARTING
PRINTSTATEMENT LEA R0, FINISHED
PUTS
BRnzp CONVERT


;SET FLAG TO BE 1 FOR NEGATIVE NUMBER
FLAG AND R7, R7, #0
ADD R7, R7, #1
ST R7, INDICATOR
BRnzp LOOP



;REPEATEDLY ADD PREVIOUS SUM
RESTORE LD R0, STORAGE
ADD R4, R0, #0

MULTADD 
ADD R0, R0, R4
ADD R1, R1, #-1

BRp MULTADD


;ADD PREVIOUS SUM TO NEW NUMBER
LD R4, NUMBER
ADD R4, R4, R0
ST R4, STORAGE


BRnzp LOOP	;GO BACK TO CHECK FOR INPUT











;NUMBER IS STORED IN STORAGE
CONVERT LD R7, INDICATOR
BRp NEGATIVE


;START COMPARING MASK TO NUMBER
CONVERSION LEA R2, MASK
AND R1, R0, #0

AND R4, R4, #0
ADD R4, R4, -16 ;COUNTER SET TO -16


;START LOOPING OF CHECK FOR 1'S
NEXT ADD R5, R4, #15 ;OFFSET FROM -16
ADD R5, R5, #1

LDR R3, R2, #0	

LD R0, STORAGE	;NOW STORED IN R0
AND R6, R0, R3
BRnp ONEBIT
BRz NOBIT


MASKING ADD R2, R2, #1	;READY TO LD NUMBER INCLUDING OFFSET FROM MASK
ADD R4, R4, #1


BRz START
BRnzp NEXT


;VALUE IS CONVERTED TO NEGATIVRE EQUIVALENT
NEGATIVE AND R0, R0, #0
LD R0, STORAGE
NOT R0, R0
ADD R0, R0, #1
ST R0, STORAGE
BRnzp CONVERSION



;OUTPUT A 1
ONEBIT AND R0, R0, #0
ADD R0, R0, #15
ADD R0, R0, #15
ADD R0, R0, #15
ADD R0, R0, #4
OUT
BRnzp MASKING


;OUTPUT A 0
NOBIT AND R0, R0, #0
ADD R0, R0, #15
ADD R0, R0, #15
ADD R0, R0, #15
ADD R0, R0, #3
OUT
BRnzp MASKING




DONE LEA R0, QUITTING
PUTS
HALT


;START OF DECLARATIONS

WELCOME .stringz "\nEnter any decimal or press 'X' to exit\n"
FINISHED .stringz "Here it is in binary\n"
QUITTING .stringz "\nAll done with program\n"


OFFSET .FILL #-48
ASCII .FILL #48

STORAGE .BLKW x1
NUMBER .BLKW x1
INDICATOR .BLKW x1


MASK 	.FILL	x8000
	.FILL	x4000
	.FILL	x2000
	.FILL	x1000
	.FILL	x0800
	.FILL	x0400
	.FILL	x0200
	.FILL	x0100
	.FILL	x0080
	.FILL	x0040
	.FILL	x0020
	.FILL	x0010
	.FILL	x0008
	.FILL	x0004
	.FILL	x0002
	.FILL	x0001


.END